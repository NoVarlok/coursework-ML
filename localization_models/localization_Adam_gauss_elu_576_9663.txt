def get_model():
    basic_dropout = 0.30
    mlp_small_dropout = 0.15
    mlp_dropout = 0.50
    l2_value = 0.000
    activation='elu'
    tf.keras.backend.clear_session()
    input_layer = keras.Input(shape=(HEIGHT, WIDTH, 3), name='image')
    
    # x = layers.Conv2D(3, 3, activation=activation)(input_layer)
    x = layers.Conv2D(3, (1, 3), activation=activation)(input_layer)
    x = layers.Conv2D(3, (3, 1), activation=activation)(x)
    # x = layers.Conv2D(16, 3, activation=activation)(x)
    x = layers.Conv2D(3, (1, 3), activation=activation)(x)
    x = layers.Conv2D(16, (3, 1), activation=activation)(x)
    x = layers.MaxPooling2D()(x)
    x = layers.Dropout(basic_dropout)(x)
    
    # x = layers.Conv2D(16, 3, activation=activation)(x)
    x = layers.Conv2D(16, (1, 3), activation=activation)(x)
    x = layers.Conv2D(16, (3, 1), activation=activation)(x)
    # x = layers.Conv2D(32, 3, activation=activation)(x)
    x = layers.Conv2D(16, (1, 3), activation=activation)(x)
    x = layers.Conv2D(32, (3, 1), activation=activation)(x)
    x = layers.MaxPooling2D()(x)
    x = layers.Dropout(basic_dropout)(x)
    
    # x = layers.Conv2D(32, 3, activation=activation)(x)
    x = layers.Conv2D(32, (1, 3), activation=activation)(x)
    x = layers.Conv2D(32, (3, 1), activation=activation)(x)
    # x = layers.Conv2D(256, 3, activation=activation)(x)
    x = layers.Conv2D(32, (1, 3), activation=activation)(x)
    x = layers.Conv2D(256, (3, 1), activation=activation)(x)
    
    
    classification = layers.GlobalMaxPool2D()(x)
    classification = layers.Dropout(mlp_small_dropout)(classification)
    classification = layers.Dense(370, activation=activation, kernel_regularizer=keras.regularizers.l2(l2_value))(classification)
    classification = layers.Dropout(mlp_dropout)(classification)
    classification = layers.Dense(len(labels), activation='softmax', name='classification')(classification)
    
    localization = layers.MaxPool2D(8)(x)
    localization = layers.Flatten()(localization)
    localization = layers.Dropout(mlp_dropout)(localization)
    localization = layers.Dense(512, activation=activation, kernel_regularizer=keras.regularizers.l2(l2_value))(localization)
    localization = layers.BatchNormalization()(localization)
    localization = layers.Dropout(mlp_dropout)(localization)
    localization = layers.Dense(350, activation=activation, kernel_regularizer=keras.regularizers.l2(l2_value))(localization)
    localization = layers.Dropout(basic_dropout)(localization)
    localization = layers.Dense(4, activation=activation, name='localization')(localization)
    
    model = keras.Model(inputs=input_layer, outputs=[localization, classification], name='classification_localizaion_model')
    return model